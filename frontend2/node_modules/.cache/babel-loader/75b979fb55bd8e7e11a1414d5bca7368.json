{"ast":null,"code":"var _jsxFileName = \"/Users/Walker/Desktop/CS/Java/Spring/tutorial/frontend/src/CommentEdit.js\";\nimport React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Button, Container, Form, FormGroup, Input, Label } from 'reactstrap';\nimport AppNavbar from './AppNavbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CommentEdit extends Component {\n  constructor(props) {\n    super(props);\n    this.emptyItem = {\n      content: '',\n      tutorial: null\n    };\n    this.state = {\n      item: this.emptyItem\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  async componentDidMount() {\n    if (this.props.match.params.commentId !== 'new') {\n      const comment = await (await fetch(`/api/comments/${this.props.match.params.commentId}`)).json();\n      this.setState({\n        item: comment\n      });\n    }\n  }\n\n  handleChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    let item = { ...this.state.item\n    };\n    item[name] = value;\n    this.setState({\n      item\n    });\n  }\n\n  async handleSubmit(event) {\n    event.preventDefault();\n    const {\n      item\n    } = this.state;\n\n    if (item.id) {\n      await fetch('/api/comments/' + item.id, {\n        method: 'PUT',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(item)\n      });\n    } else {\n      await fetch(`/api/tutorials/${this.props.match.params.tutorialId}/comments`, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(item)\n      });\n    }\n\n    this.props.history.push('/tutorials');\n  }\n\n  render() {\n    const {\n      item\n    } = this.state;\n\n    const title = /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: item.id ? 'Edit Comment' : 'Add Comment'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 23\n    }, this);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(AppNavbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        children: [title, /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: this.handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              for: \"content\",\n              children: \"Content\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"text\",\n              name: \"content\",\n              id: \"content\",\n              value: item.content || '',\n              onChange: this.handleChange,\n              autoComplete: \"content\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              color: \"primary\",\n              type: \"submit\",\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 25\n            }, this), ' ', /*#__PURE__*/_jsxDEV(Button, {\n              color: \"secondary\",\n              tag: Link,\n              to: \"/tutorials/\" + this.props.match.params.tutorialId + \"/comments\",\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default _c = withRouter(CommentEdit);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/Users/Walker/Desktop/CS/Java/Spring/tutorial/frontend/src/CommentEdit.js"],"names":["React","Component","Link","withRouter","Button","Container","Form","FormGroup","Input","Label","AppNavbar","CommentEdit","constructor","props","emptyItem","content","tutorial","state","item","handleChange","bind","handleSubmit","componentDidMount","match","params","commentId","comment","fetch","json","setState","event","target","value","name","preventDefault","id","method","headers","body","JSON","stringify","tutorialId","history","push","render","title"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Button, Container, Form, FormGroup, Input, Label } from 'reactstrap';\nimport AppNavbar from './AppNavbar';\n\nclass CommentEdit extends Component {\n    emptyItem = {\n        content: '',\n        tutorial: null\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            item: this.emptyItem\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    async componentDidMount() {\n        if (this.props.match.params.commentId !== 'new') {\n            const comment = await (await fetch(`/api/comments/${this.props.match.params.commentId}`)).json();\n            this.setState({item: comment});\n        }\n    }\n\n    handleChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        let item = {...this.state.item};\n        item[name] = value;\n        this.setState({item});\n    }\n\n    async handleSubmit(event) {\n        event.preventDefault();\n        const {item} = this.state;\n\n        if (item.id) {\n            await fetch('/api/comments/' + item.id, {\n                method: 'PUT',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(item),\n            });\n        } else {\n            await fetch(`/api/tutorials/${this.props.match.params.tutorialId}/comments`, {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(item),\n            });\n        }\n        this.props.history.push('/tutorials');\n    }\n\n    render() {\n        const {item} = this.state;\n        const title = <h2>{item.id ? 'Edit Comment' : 'Add Comment'}</h2>;\n\n        return <div>\n            <AppNavbar/>\n            <Container>\n                {title}\n                <Form onSubmit={this.handleSubmit}>\n                    <FormGroup>\n                        <Label for=\"content\">Content</Label>\n                        <Input type=\"text\" name=\"content\" id=\"content\" value={item.content || ''}\n                               onChange={this.handleChange} autoComplete=\"content\"/>\n                    </FormGroup>\n                    <FormGroup>\n                        <Button color=\"primary\" type=\"submit\">Save</Button>{' '}\n                        <Button color=\"secondary\" tag={Link} to={\"/tutorials/\" + this.props.match.params.tutorialId + \"/comments\"}>\n                            Cancel\n                        </Button>\n                    </FormGroup>\n                </Form>\n            </Container>\n        </div>\n    }\n}\n\nexport default withRouter(CommentEdit)"]},"metadata":{},"sourceType":"module"}