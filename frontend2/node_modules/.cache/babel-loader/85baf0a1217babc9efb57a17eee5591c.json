{"ast":null,"code":"var _jsxFileName = \"/Users/Walker/Desktop/CS/Java/Spring/tutorial/frontend/src/CommentEdit.js\";\nimport React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Button, Container, Form, FormGroup, Input, Label } from 'reactstrap';\nimport AppNavbar from './AppNavbar';\nimport { instanceOf } from 'prop-types';\nimport { withCookies, Cookies } from 'react-cookie';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CommentEdit extends Component {\n  /*constructor(props) {\n      super(props);\n      this.state = {\n          item: this.emptyItem\n      };\n      this.handleChange = this.handleChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n  }*/\n  constructor(props) {\n    super(props);\n    this.emptyItem = {\n      content: '',\n      tutorial: null\n    };\n    const {\n      cookies\n    } = props;\n    this.state = {\n      item: this.emptyItem,\n      csrfToken: cookies.get('XSRF-TOKEN')\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  /*async componentDidMount() {\n      if (this.props.match.params.commentId !== 'new') {\n          const comment = await (await fetch(`/api/comments/${this.props.match.params.commentId}`)).json();\n          this.setState({item: comment});\n      }\n  }*/\n\n\n  async componentDidMount() {\n    if (this.props.match.params.commentId !== 'new') {\n      try {\n        const comment = await (await fetch(`/api/comments/${this.props.match.params.commentId}`, {\n          credentials: 'include'\n        })).json();\n        this.setState({\n          item: comment\n        });\n      } catch (error) {\n        this.props.history.push('/');\n      }\n    }\n  }\n\n  handleChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    let item = { ...this.state.item\n    };\n    item[name] = value;\n    this.setState({\n      item\n    });\n  }\n  /*async handleSubmit(event) {\n      event.preventDefault();\n      const {item} = this.state;\n       if (item.id) {\n          await fetch('/api/comments/' + item.id, {\n              method: 'PUT',\n              headers: {\n                  'Accept': 'application/json',\n                  'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(item),\n          });\n      } else {\n          await fetch(`/api/tutorials/${this.props.match.params.tutorialId}/comments`, {\n              method: 'POST',\n              headers: {\n                  'Accept': 'application/json',\n                  'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(item),\n          });\n      }\n      this.props.history.push(`/tutorials/${this.props.match.params.tutorialId}/${this.props.match.params.tutorialTitle}`);\n  }*/\n\n\n  async handleSubmit(event) {\n    event.preventDefault();\n    const {\n      item\n    } = this.state;\n\n    if (item.id) {\n      await fetch('/api/comments/' + item.id, {\n        method: 'PUT',\n        headers: {\n          'X-XSRF-TOKEN': csrfToken,\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(item),\n        credentials: 'include'\n      });\n    } else {\n      await fetch(`/api/tutorials/${this.props.match.params.tutorialId}/comments`, {\n        method: 'POST',\n        headers: {\n          'X-XSRF-TOKEN': csrfToken,\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(item),\n        credentials: 'include'\n      });\n    }\n\n    this.props.history.push(`/tutorials/${this.props.match.params.tutorialId}/${this.props.match.params.tutorialTitle}`);\n  }\n\n  render() {\n    const {\n      item\n    } = this.state;\n\n    const title = /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: item.id ? 'Edit Comment' : 'Add Comment'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 23\n    }, this);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(AppNavbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        children: [title, /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: this.handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              for: \"content\",\n              children: \"Content\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"text\",\n              name: \"content\",\n              id: \"content\",\n              value: item.content || '',\n              onChange: this.handleChange,\n              autoComplete: \"content\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              color: \"primary\",\n              type: \"submit\",\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 25\n            }, this), ' ', /*#__PURE__*/_jsxDEV(Button, {\n              color: \"secondary\",\n              tag: Link,\n              to: \"/tutorials/\" + this.props.match.params.tutorialId + \"/\" + this.props.match.params.tutorialTitle,\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 16\n    }, this);\n  }\n\n} //export default withRouter(CommentEdit)\n\n\nCommentEdit.propTypes = {\n  cookies: instanceOf(Cookies).isRequired\n};\nexport default _c2 = withCookies(_c = withRouter(CommentEdit));\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"%default%$withCookies\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/Walker/Desktop/CS/Java/Spring/tutorial/frontend/src/CommentEdit.js"],"names":["React","Component","Link","withRouter","Button","Container","Form","FormGroup","Input","Label","AppNavbar","instanceOf","withCookies","Cookies","CommentEdit","constructor","props","emptyItem","content","tutorial","cookies","state","item","csrfToken","get","handleChange","bind","handleSubmit","componentDidMount","match","params","commentId","comment","fetch","credentials","json","setState","error","history","push","event","target","value","name","preventDefault","id","method","headers","body","JSON","stringify","tutorialId","tutorialTitle","render","title","propTypes","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,kBAAjC;AACA,SAASC,MAAT,EAAiBC,SAAjB,EAA4BC,IAA5B,EAAkCC,SAAlC,EAA6CC,KAA7C,EAAoDC,KAApD,QAAiE,YAAjE;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,SAASC,UAAT,QAA2B,YAA3B;AACA,SAASC,WAAT,EAAsBC,OAAtB,QAAqC,cAArC;;;AAEA,MAAMC,WAAN,SAA0Bb,SAA1B,CAAoC;AAUhC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACIc,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AADe,SAbnBC,SAamB,GAbP;AACRC,MAAAA,OAAO,EAAE,EADD;AAERC,MAAAA,QAAQ,EAAE;AAFF,KAaO;AAEf,UAAM;AAACC,MAAAA;AAAD,QAAYJ,KAAlB;AACA,SAAKK,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAE,KAAKL,SADF;AAETM,MAAAA,SAAS,EAAEH,OAAO,CAACI,GAAR,CAAY,YAAZ;AAFF,KAAb;AAIA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CAApB;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AAC2B,QAAjBE,iBAAiB,GAAG;AACtB,QAAI,KAAKZ,KAAL,CAAWa,KAAX,CAAiBC,MAAjB,CAAwBC,SAAxB,KAAsC,KAA1C,EAAiD;AAC7C,UAAI;AACA,cAAMC,OAAO,GAAG,MAAM,CAAC,MAAMC,KAAK,CAAE,iBAAgB,KAAKjB,KAAL,CAAWa,KAAX,CAAiBC,MAAjB,CAAwBC,SAAU,EAApD,EAAuD;AAACG,UAAAA,WAAW,EAAE;AAAd,SAAvD,CAAZ,EAA8FC,IAA9F,EAAtB;AACA,aAAKC,QAAL,CAAc;AAACd,UAAAA,IAAI,EAAEU;AAAP,SAAd;AACH,OAHD,CAGE,OAAOK,KAAP,EAAc;AACZ,aAAKrB,KAAL,CAAWsB,OAAX,CAAmBC,IAAnB,CAAwB,GAAxB;AACH;AACJ;AACJ;;AAEDd,EAAAA,YAAY,CAACe,KAAD,EAAQ;AAChB,UAAMC,MAAM,GAAGD,KAAK,CAACC,MAArB;AACA,UAAMC,KAAK,GAAGD,MAAM,CAACC,KAArB;AACA,UAAMC,IAAI,GAAGF,MAAM,CAACE,IAApB;AACA,QAAIrB,IAAI,GAAG,EAAC,GAAG,KAAKD,KAAL,CAAWC;AAAf,KAAX;AACAA,IAAAA,IAAI,CAACqB,IAAD,CAAJ,GAAaD,KAAb;AACA,SAAKN,QAAL,CAAc;AAACd,MAAAA;AAAD,KAAd;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEsB,QAAZK,YAAY,CAACa,KAAD,EAAQ;AACtBA,IAAAA,KAAK,CAACI,cAAN;AACA,UAAM;AAACtB,MAAAA;AAAD,QAAS,KAAKD,KAApB;;AAEA,QAAIC,IAAI,CAACuB,EAAT,EAAa;AACT,YAAMZ,KAAK,CAAC,mBAAmBX,IAAI,CAACuB,EAAzB,EAA6B;AACpCC,QAAAA,MAAM,EAAE,KAD4B;AAEpCC,QAAAA,OAAO,EAAE;AACL,0BAAgBxB,SADX;AAEL,oBAAU,kBAFL;AAGL,0BAAgB;AAHX,SAF2B;AAOpCyB,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe5B,IAAf,CAP8B;AAQpCY,QAAAA,WAAW,EAAE;AARuB,OAA7B,CAAX;AAUH,KAXD,MAWO;AACH,YAAMD,KAAK,CAAE,kBAAiB,KAAKjB,KAAL,CAAWa,KAAX,CAAiBC,MAAjB,CAAwBqB,UAAW,WAAtD,EAAkE;AACzEL,QAAAA,MAAM,EAAE,MADiE;AAEzEC,QAAAA,OAAO,EAAE;AACL,0BAAgBxB,SADX;AAEL,oBAAU,kBAFL;AAGL,0BAAgB;AAHX,SAFgE;AAOzEyB,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe5B,IAAf,CAPmE;AAQzEY,QAAAA,WAAW,EAAE;AAR4D,OAAlE,CAAX;AAUH;;AACD,SAAKlB,KAAL,CAAWsB,OAAX,CAAmBC,IAAnB,CAAyB,cAAa,KAAKvB,KAAL,CAAWa,KAAX,CAAiBC,MAAjB,CAAwBqB,UAAW,IAAG,KAAKnC,KAAL,CAAWa,KAAX,CAAiBC,MAAjB,CAAwBsB,aAAc,EAAlH;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,UAAM;AAAC/B,MAAAA;AAAD,QAAS,KAAKD,KAApB;;AACA,UAAMiC,KAAK,gBAAG;AAAA,gBAAKhC,IAAI,CAACuB,EAAL,GAAU,cAAV,GAA2B;AAAhC;AAAA;AAAA;AAAA;AAAA,YAAd;;AAEA,wBAAO;AAAA,8BACH,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,cADG,eAEH,QAAC,SAAD;AAAA,mBACKS,KADL,eAEI,QAAC,IAAD;AAAM,UAAA,QAAQ,EAAE,KAAK3B,YAArB;AAAA,kCACI,QAAC,SAAD;AAAA,oCACI,QAAC,KAAD;AAAO,cAAA,GAAG,EAAC,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI,QAAC,KAAD;AAAO,cAAA,IAAI,EAAC,MAAZ;AAAmB,cAAA,IAAI,EAAC,SAAxB;AAAkC,cAAA,EAAE,EAAC,SAArC;AAA+C,cAAA,KAAK,EAAEL,IAAI,CAACJ,OAAL,IAAgB,EAAtE;AACO,cAAA,QAAQ,EAAE,KAAKO,YADtB;AACoC,cAAA,YAAY,EAAC;AADjD;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAMI,QAAC,SAAD;AAAA,oCACI,QAAC,MAAD;AAAQ,cAAA,KAAK,EAAC,SAAd;AAAwB,cAAA,IAAI,EAAC,QAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,EACwD,GADxD,eAEI,QAAC,MAAD;AAAQ,cAAA,KAAK,EAAC,WAAd;AAA0B,cAAA,GAAG,EAAEvB,IAA/B;AAAqC,cAAA,EAAE,EAAE,gBAAgB,KAAKc,KAAL,CAAWa,KAAX,CAAiBC,MAAjB,CAAwBqB,UAAxC,GACrC,GADqC,GAC/B,KAAKnC,KAAL,CAAWa,KAAX,CAAiBC,MAAjB,CAAwBsB,aADlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBANJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFG;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AAkBH;;AApI+B,C,CAuIpC;;;AAvIMtC,W,CACKyC,S,GAAY;AACfnC,EAAAA,OAAO,EAAET,UAAU,CAACE,OAAD,CAAV,CAAoB2C;AADd,C;AAuIvB,qBAAe5C,WAAW,MAACT,UAAU,CAACW,WAAD,CAAX,CAA1B","sourcesContent":["import React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Button, Container, Form, FormGroup, Input, Label } from 'reactstrap';\nimport AppNavbar from './AppNavbar';\n\nimport { instanceOf } from 'prop-types';\nimport { withCookies, Cookies } from 'react-cookie';\n\nclass CommentEdit extends Component {\n    static propTypes = {\n        cookies: instanceOf(Cookies).isRequired\n    };\n\n    emptyItem = {\n        content: '',\n        tutorial: null\n    };\n\n    /*constructor(props) {\n        super(props);\n        this.state = {\n            item: this.emptyItem\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }*/\n    constructor(props) {\n        super(props);\n        const {cookies} = props;\n        this.state = {\n            item: this.emptyItem,\n            csrfToken: cookies.get('XSRF-TOKEN')\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    /*async componentDidMount() {\n        if (this.props.match.params.commentId !== 'new') {\n            const comment = await (await fetch(`/api/comments/${this.props.match.params.commentId}`)).json();\n            this.setState({item: comment});\n        }\n    }*/\n    async componentDidMount() {\n        if (this.props.match.params.commentId !== 'new') {\n            try {\n                const comment = await (await fetch(`/api/comments/${this.props.match.params.commentId}`, {credentials: 'include'})).json();\n                this.setState({item: comment});\n            } catch (error) {\n                this.props.history.push('/');\n            }\n        }\n    }\n\n    handleChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        let item = {...this.state.item};\n        item[name] = value;\n        this.setState({item});\n    }\n\n    /*async handleSubmit(event) {\n        event.preventDefault();\n        const {item} = this.state;\n\n        if (item.id) {\n            await fetch('/api/comments/' + item.id, {\n                method: 'PUT',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(item),\n            });\n        } else {\n            await fetch(`/api/tutorials/${this.props.match.params.tutorialId}/comments`, {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(item),\n            });\n        }\n        this.props.history.push(`/tutorials/${this.props.match.params.tutorialId}/${this.props.match.params.tutorialTitle}`);\n    }*/\n    async handleSubmit(event) {\n        event.preventDefault();\n        const {item} = this.state;\n\n        if (item.id) {\n            await fetch('/api/comments/' + item.id, {\n                method: 'PUT',\n                headers: {\n                    'X-XSRF-TOKEN': csrfToken,\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(item),\n                credentials: 'include'\n            });\n        } else {\n            await fetch(`/api/tutorials/${this.props.match.params.tutorialId}/comments`, {\n                method: 'POST',\n                headers: {\n                    'X-XSRF-TOKEN': csrfToken,\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(item),\n                credentials: 'include'\n            });\n        }\n        this.props.history.push(`/tutorials/${this.props.match.params.tutorialId}/${this.props.match.params.tutorialTitle}`);\n    }\n\n    render() {\n        const {item} = this.state;\n        const title = <h2>{item.id ? 'Edit Comment' : 'Add Comment'}</h2>;\n\n        return <div>\n            <AppNavbar/>\n            <Container>\n                {title}\n                <Form onSubmit={this.handleSubmit}>\n                    <FormGroup>\n                        <Label for=\"content\">Content</Label>\n                        <Input type=\"text\" name=\"content\" id=\"content\" value={item.content || ''}\n                               onChange={this.handleChange} autoComplete=\"content\"/>\n                    </FormGroup>\n                    <FormGroup>\n                        <Button color=\"primary\" type=\"submit\">Save</Button>{' '}\n                        <Button color=\"secondary\" tag={Link} to={\"/tutorials/\" + this.props.match.params.tutorialId +\n                            \"/\" + this.props.match.params.tutorialTitle}>Cancel</Button>\n                    </FormGroup>\n                </Form>\n            </Container>\n        </div>\n    }\n}\n\n//export default withRouter(CommentEdit)\nexport default withCookies(withRouter(CommentEdit));"]},"metadata":{},"sourceType":"module"}