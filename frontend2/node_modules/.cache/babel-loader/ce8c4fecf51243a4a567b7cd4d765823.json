{"ast":null,"code":"var _jsxFileName = \"/Users/Walker/Desktop/CS/Java/Spring/tutorial/frontend/src/TutorialEdit.js\";\nimport React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Button, Container, Form, FormGroup, Input, Label } from 'reactstrap';\nimport AppNavbar from './AppNavbar';\nimport { instanceOf } from 'prop-types';\nimport { Cookies, withCookies } from 'react-cookie';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TutorialEdit extends Component {\n  constructor(props) {\n    super(props);\n    this.emptyItem = {\n      title: '',\n      description: '',\n      published: true\n    };\n    const {\n      cookies\n    } = props;\n    this.state = {\n      item: this.emptyItem\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  async componentDidMount() {\n    if (this.props.match.params.tutorialId !== 'new') {\n      const tutorial = await (await fetch(`/api/tutorials/${this.props.match.params.tutorialId}`)).json();\n      this.setState({\n        item: tutorial\n      });\n    }\n  }\n\n  handleChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    let item = { ...this.state.item\n    };\n    item[name] = value;\n    this.setState({\n      item\n    });\n  }\n\n  async handleSubmit(event) {\n    event.preventDefault();\n    const {\n      item\n    } = this.state;\n    await fetch('/api/tutorials' + (item.id ? '/' + item.id : ''), {\n      method: item.id ? 'PUT' : 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(item)\n    });\n    this.props.history.push('/tutorials');\n  }\n\n  render() {\n    const {\n      item\n    } = this.state;\n\n    const title = /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: item.id ? 'Edit Tutorial' : 'Add Tutorial'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 23\n    }, this);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(AppNavbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        children: [title, /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: this.handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              for: \"title\",\n              children: \"Title\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"text\",\n              name: \"title\",\n              id: \"title\",\n              value: item.title || '',\n              onChange: this.handleChange,\n              autoComplete: \"title\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              for: \"description\",\n              children: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"text\",\n              name: \"description\",\n              id: \"description\",\n              value: item.description || '',\n              onChange: this.handleChange,\n              autoComplete: \"description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              color: \"primary\",\n              type: \"submit\",\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 25\n            }, this), ' ', /*#__PURE__*/_jsxDEV(Button, {\n              color: \"secondary\",\n              tag: Link,\n              to: \"/tutorials\",\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nTutorialEdit.propTypes = {\n  cookies: instanceOf(Cookies).isRequired\n};\nexport default _c = withRouter(TutorialEdit);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/Users/Walker/Desktop/CS/Java/Spring/tutorial/frontend/src/TutorialEdit.js"],"names":["React","Component","Link","withRouter","Button","Container","Form","FormGroup","Input","Label","AppNavbar","instanceOf","Cookies","withCookies","TutorialEdit","constructor","props","emptyItem","title","description","published","cookies","state","item","handleChange","bind","handleSubmit","componentDidMount","match","params","tutorialId","tutorial","fetch","json","setState","event","target","value","name","preventDefault","id","method","headers","body","JSON","stringify","history","push","render","propTypes","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Button, Container, Form, FormGroup, Input, Label } from 'reactstrap';\nimport AppNavbar from './AppNavbar';\nimport { instanceOf } from 'prop-types';\nimport { Cookies, withCookies } from 'react-cookie';\n\nclass TutorialEdit extends Component {\n    static propTypes = {\n        cookies: instanceOf(Cookies).isRequired\n    };\n\n    emptyItem = {\n        title: '',\n        description: '',\n        published: true\n    };\n\n    constructor(props) {\n        super(props);\n        const {cookies} = props;\n        this.state = {\n            item: this.emptyItem\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    async componentDidMount() {\n        if (this.props.match.params.tutorialId !== 'new') {\n            const tutorial = await (await fetch(`/api/tutorials/${this.props.match.params.tutorialId}`)).json();\n            this.setState({item: tutorial});\n        }\n    }\n\n    handleChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        let item = {...this.state.item};\n        item[name] = value;\n        this.setState({item});\n    }\n\n    async handleSubmit(event) {\n        event.preventDefault();\n        const {item} = this.state;\n\n        await fetch('/api/tutorials' + (item.id ? '/' + item.id : ''), {\n            method: (item.id) ? 'PUT' : 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(item),\n        });\n        this.props.history.push('/tutorials');\n    }\n\n    render() {\n        const {item} = this.state;\n        const title = <h2>{item.id ? 'Edit Tutorial' : 'Add Tutorial'}</h2>;\n\n        return <div>\n            <AppNavbar/>\n            <Container>\n                {title}\n                <Form onSubmit={this.handleSubmit}>\n                    <FormGroup>\n                        <Label for=\"title\">Title</Label>\n                        <Input type=\"text\" name=\"title\" id=\"title\" value={item.title || ''}\n                               onChange={this.handleChange} autoComplete=\"title\"/>\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"description\">Description</Label>\n                        <Input type=\"text\" name=\"description\" id=\"description\" value={item.description || ''}\n                               onChange={this.handleChange} autoComplete=\"description\"/>\n                    </FormGroup>\n                    <FormGroup>\n                        <Button color=\"primary\" type=\"submit\">Save</Button>{' '}\n                        <Button color=\"secondary\" tag={Link} to=\"/tutorials\">Cancel</Button>\n                    </FormGroup>\n                </Form>\n            </Container>\n        </div>\n    }\n}\n\nexport default withRouter(TutorialEdit);"]},"metadata":{},"sourceType":"module"}